// Each #kernel tells which function to compile; you can have many kernels
#pragma kernel Run16
#pragma kernel Run8
#include "Assets/Tests.cginc"
// Create a RenderTexture with enableRandomWrite flag and set it
// with cs.SetTexture
RWStructuredBuffer<int> tiles;
RWStructuredBuffer<int> counts;
StructuredBuffer<int> lines;
StructuredBuffer<float2> vertices;
StructuredBuffer<int> buffer;
StructuredBuffer<int> filterCounts;
int xtiles;
int ytiles;
int filterXtiles;
int filterYtiles;
int tileLines;
float distCheck;

void run(uint3 id)
{
    float2 pos = (id.xy+0.5)/float2(xtiles,ytiles)*2-1;
    int2 filterTile = id.xy / int2(xtiles/filterXtiles,ytiles/filterYtiles);

    int idx = id.x+id.y*xtiles;
    int fidx = filterTile.x+filterTile.y*filterXtiles;
    tiles[idx]=0;
    int count = 0;
    int numLines = filterCounts[fidx];
    for(int i=0; i<numLines; i++)
    {
        int ln_id = lines[fidx+i*filterXtiles*filterYtiles];
        
        float4 ln = float4(vertices[buffer[ln_id*2]],vertices[buffer[ln_id*2+1]])-float4(pos,pos);
        

        tiles[idx+count*xtiles*ytiles]=ln_id;

        count += get_line(ln.xy,float2(0,0),ln.zw)<(distCheck*2);

        if(count==tileLines){
            break;
        }

    }
    counts[idx]=count;
}

[numthreads(16,16,1)]
void Run16 (uint3 id : SV_DispatchThreadID)
{
    
    run(id);

    
}

[numthreads(8,8,1)]
void Run8 (uint3 id : SV_DispatchThreadID)
{
    
    run(id);

    
}
